/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package laptop;

import javax.swing.table.DefaultTableModel;
import java.sql.*;

/**
 * @author Faris Rizky R
 */
public class FrameCRUD extends javax.swing.JFrame {

    /**
     * Creates new form FrameCRUD
     */
    private ManageLaptop manageLaptop;
    private final DefaultTableModel model = new DefaultTableModel(new Object[]{"ID", "Nama Laptop", "Kategori OS"}, 0);
    private int selectedLaptopId = 0;


    public FrameCRUD() {

        initComponents();
        KategoriLaptop();

        // Set model dan disable kolom ID
        TableLaptop.setModel(model);
        TableLaptop.getColumnModel().getColumn(0).setMinWidth(0);
        TableLaptop.getColumnModel().getColumn(0).setMaxWidth(0);
        TableLaptop.getColumnModel().getColumn(0).setWidth(0);

        ReadLaptop();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelcrud = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        FormNamaLaptop = new javax.swing.JTextField();
        KategoriBox = new javax.swing.JComboBox<>();
        btnCreate = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        FormSearch = new javax.swing.JTextField();
        FilterLaptopBox = new javax.swing.JComboBox<>();
        btnSearch = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableLaptop = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        labelcrud.setText("CRUD Laptop");

        jLabel1.setText("Nama Laptop :");

        jLabel2.setText("Kategori :");

        btnCreate.setText("Create");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        FormSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FormSearchActionPerformed(evt);
            }
        });

        FilterLaptopBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilterLaptopBoxActionPerformed(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        TableLaptop.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "Nama", "Kategori OS"
            }
        ));
        TableLaptop.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableLaptopMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TableLaptop);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(327, Short.MAX_VALUE)
                .addComponent(labelcrud)
                .addGap(313, 313, 313))
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(FormNamaLaptop)
                    .addComponent(KategoriBox, 0, 182, Short.MAX_VALUE))
                .addContainerGap(415, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(btnCreate)
                .addGap(18, 18, 18)
                .addComponent(btnUpdate)
                .addGap(18, 18, 18)
                .addComponent(btnDelete)
                .addGap(53, 53, 53)
                .addComponent(FormSearch)
                .addGap(18, 18, 18)
                .addComponent(btnSearch)
                .addGap(26, 26, 26)
                .addComponent(FilterLaptopBox, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelcrud)
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(FormNamaLaptop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(KategoriBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCreate)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete)
                    .addComponent(FormSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FilterLaptopBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        try {
            String nama = FormNamaLaptop.getText();
            int kategori = KategoriBox.getSelectedIndex();

            if (kategori == 0) {
                System.out.println("Kategori harus dipilih");
            } else {

                manageLaptop = new ManageLaptop(0, nama, kategori);

                if (manageLaptop.insertLaptop()) {
                    System.out.println("Laptop berhasil disimpan!");
                    model.setRowCount(0);  // Menghapus semua baris dari model
                    ReadLaptop();  // Memuat ulang data laptop ke dalam tabel
                } else {
                    System.err.println("Laptop gagal disimpan!");
                }
            }

        } catch (Exception e) {
            System.err.println("Error: " + e.getMessage());
        }
    }//GEN-LAST:event_btnCreateActionPerformed

    private void FilterLaptopBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FilterLaptopBoxActionPerformed
        String selectedCategory = (String) FilterLaptopBox.getSelectedItem();
        System.out.println(FilterLaptopBox.getSelectedItem());
        if (selectedCategory.equals("Pilih Kategori")) {
            ReadLaptop();
        } else {
            model.setRowCount(0); // Hapus semua data dari tabel
            try {
                Connection conn = new Koneksi().getConnection();
                String query = "SELECT l.id, l.nama, k.kategori_os FROM laptop l JOIN kategori k ON l.os = k.id WHERE k.kategori_os = ? ORDER BY l.id DESC";
                PreparedStatement ps = conn.prepareStatement(query);
                ps.setString(1, selectedCategory);

                ResultSet rs = ps.executeQuery();
                while (rs.next()) {
                    int idLaptop = rs.getInt("id");
                    String namaLaptop = rs.getString("nama");
                    String kategoriOS = rs.getString("kategori_os");
                    model.addRow(new Object[]{idLaptop, namaLaptop, kategoriOS});
                }

                conn.close();
            } catch (SQLException e) {
                System.err.println("Gagal memuat data laptop berdasarkan kategori: " + e.getMessage());
            }
        }
    }//GEN-LAST:event_FilterLaptopBoxActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        manageLaptop.setId(selectedLaptopId);

        boolean isDeleted = manageLaptop.deleteLaptop();
        if (isDeleted) {
            System.out.println("Laptop berhasil dihapus!");
            model.setRowCount(0);  // Menghapus semua baris dari model
            ReadLaptop();  // Memuat ulang data laptop ke dalam tabel
        } else {
            System.out.println("Gagal menghapus laptop.");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void TableLaptopMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableLaptopMouseClicked
        int row = TableLaptop.getSelectedRow();
        System.out.println(row);
        Object selectedLaptopIdObject = TableLaptop.getValueAt(row, 0);
        selectedLaptopId = (int) selectedLaptopIdObject;
        String namaLaptop = (String) TableLaptop.getValueAt(row, 1); // Nama Laptop
        String kategoriOS = (String) TableLaptop.getValueAt(row, 2); // Kategori OS

        // Tampilkan data ke form
        FormNamaLaptop.setText(namaLaptop);
        KategoriBox.setSelectedItem(kategoriOS);
        System.out.println("ID Laptop yang dipilih: " + selectedLaptopIdObject);

    }//GEN-LAST:event_TableLaptopMouseClicked

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        try {
            // Ambil data dari form
            String namaLaptop = FormNamaLaptop.getText();
            int kategoriIndex = KategoriBox.getSelectedIndex();

            // Validasi input
            if (selectedLaptopId == 0) {
                System.out.println("Pilih laptop dari tabel terlebih dahulu!");
                return;
            }

            if (kategoriIndex == 0 || namaLaptop.isEmpty()) {
                System.out.println("Nama laptop dan kategori tidak boleh kosong.");
                return;
            }

            // Update data laptop
            manageLaptop = new ManageLaptop(selectedLaptopId, namaLaptop, kategoriIndex);
            boolean isUpdated = manageLaptop.updateLaptop();

            if (isUpdated) {
                System.out.println("Laptop berhasil diperbarui!");
                model.setRowCount(0);
                ReadLaptop();
            } else {
                System.out.println("Gagal memperbarui laptop.");
            }
        } catch (Exception e) {
            System.err.println("Error saat memperbarui laptop: " + e.getMessage());
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void FormSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FormSearchActionPerformed

    }//GEN-LAST:event_FormSearchActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // Menangkap nilai pencarian dari FormSearch
        String searchLaptop = FormSearch.getText();

        try {
            model.setRowCount(0); // Hapus semua data dari tabel
            Connection conn = new Koneksi().getConnection();

            // Query untuk pencarian berdasarkan nama laptop
            String query = "SELECT l.id, l.nama, k.kategori_os FROM laptop l JOIN kategori k ON l.os = k.id WHERE l.nama LIKE ? ORDER BY l.id DESC";
            PreparedStatement ps = conn.prepareStatement(query);
            ps.setString(1, "%" + searchLaptop + "%");

            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                int idLaptop = rs.getInt("id");
                String namaLaptop = rs.getString("nama");
                String kategoriOS = rs.getString("kategori_os");
                model.addRow(new Object[]{idLaptop, namaLaptop, kategoriOS});
            }

            conn.close();
        } catch (SQLException e) {
            System.err.println("Gagal memuat data laptop: " + e.getMessage());
        }
    }//GEN-LAST:event_btnSearchActionPerformed


    private void ReadLaptop() {
        try {
            Connection conn = new Koneksi().getConnection();
            String query = "SELECT l.id, l.nama, k.kategori_os FROM laptop l JOIN kategori k ON l.os = k.id ORDER BY l.id DESC";
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(query);

            model.setRowCount(0); // Hapus semua data dari tabel

            while (rs.next()) {
                int idLaptop = rs.getInt("id");
                String namaLaptop = rs.getString("nama");
                String kategoriOS = rs.getString("kategori_os");
                model.addRow(new Object[]{idLaptop, namaLaptop, kategoriOS});
            }

            conn.close();
        } catch (SQLException e) {
            System.err.println("Gagal memuat data laptop: " + e.getMessage());
        }
    }
    private void KategoriLaptop() {
        KategoriBox.removeAllItems();
        KategoriBox.addItem("Pilih Kategori");
        FilterLaptopBox.addItem("Pilih Kategori");

        try {
            Connection conn = new Koneksi().getConnection();
            String query = "SELECT kategori_os FROM kategori";
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(query);

            while (rs.next()) {
                KategoriBox.addItem(rs.getString("kategori_os"));
                FilterLaptopBox.addItem(rs.getString("kategori_os"));
            }

            conn.close();
        } catch (SQLException e) {
            System.err.println("Gagal memuat kategori: " + e.getMessage());
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrameCRUD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrameCRUD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrameCRUD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameCRUD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrameCRUD().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> FilterLaptopBox;
    private javax.swing.JTextField FormNamaLaptop;
    private javax.swing.JTextField FormSearch;
    private javax.swing.JComboBox<String> KategoriBox;
    private javax.swing.JTable TableLaptop;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelcrud;
    // End of variables declaration//GEN-END:variables
}
