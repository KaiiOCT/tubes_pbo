/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package laptop;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Date;
import java.sql.PreparedStatement;

/**
 *
 * @author faiqa
 */
public class FrameTransaksi extends javax.swing.JFrame {

    private final DefaultTableModel model = new DefaultTableModel(new Object[]{"ID", "Nama Laptop", "Tanggal Sewa", "Tanggal Pengembalian", "Harga Sewa", "ID Laptop"}, 0);
    private final DefaultComboBoxModel<ManageLaptop> modelList = new DefaultComboBoxModel<>();
    private Transaksi transaksi;
    private static final Koneksi k = new Koneksi();
    private int selectedIdTransaksi = 0;
    private int selectedIdLaptop = 0;
    private String selectNamaLaptop = "";
    private Integer laptopId = 0;
    private ManageLaptop pilihLaptop = new ManageLaptop(0, "Pilih Laptop");

    /**
     * Creates new form FrameTransaksi
     */
    public FrameTransaksi() {
        initComponents();
        transaksi = new Transaksi(0, null, null, 0);

        listLaptop.setModel(modelList);
        //listLaptop.getModel().getElementAt(0);
        tableTransaksi.setModel(model);
        tableTransaksi.getColumnModel().getColumn(0).setMinWidth(0);
        tableTransaksi.getColumnModel().getColumn(0).setMaxWidth(0);
        tableTransaksi.getColumnModel().getColumn(0).setWidth(0);
        tableTransaksi.getColumnModel().getColumn(5).setMinWidth(0);
        tableTransaksi.getColumnModel().getColumn(5).setMaxWidth(0);
        tableTransaksi.getColumnModel().getColumn(5).setWidth(0);
        ReadTransaksi();
        DaftarLaptop();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableTransaksi = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        btnLogout = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        inputTanggalSewa = new com.toedter.calendar.JDateChooser();
        inputTanggalKembali = new com.toedter.calendar.JDateChooser();
        listLaptop = new JComboBox<ManageLaptop>();
        createButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tableTransaksi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Laptop", "Tanggal Sewa", "Tanggal Kembali", "Total Harga", "ID Laptop"
            }
        ));
        tableTransaksi.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableTransaksiMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableTransaksi);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Transaksi");

        btnBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/lets-icons_back.png"))); // NOI18N
        btnBack.setText("Kembali");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnLogout.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnLogout.setForeground(new java.awt.Color(255, 0, 0));
        btnLogout.setText("Log Out");
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnBack)
                .addGap(136, 136, 136)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnLogout)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnLogout)
                    .addComponent(jLabel1)
                    .addComponent(btnBack))
                .addContainerGap(10, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setText("Tanggal Sewa");

        jLabel3.setText("Tanggal Kembali");

        jLabel4.setText("Laptop");

        listLaptop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listLaptopActionPerformed(evt);
            }
        });

        createButton.setForeground(new java.awt.Color(102, 102, 255));
        createButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/material-symbols_add.png"))); // NOI18N
        createButton.setText("Create");
        createButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createButtonActionPerformed(evt);
            }
        });

        updateButton.setForeground(new java.awt.Color(204, 204, 0));
        updateButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/material-symbols_edit-sharp.png"))); // NOI18N
        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        deleteButton.setForeground(new java.awt.Color(255, 0, 0));
        deleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/material-symbols_delete-sharp.png"))); // NOI18N
        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(createButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(deleteButton))
                    .addComponent(listLaptop, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputTanggalKembali, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputTanggalSewa, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inputTanggalSewa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inputTanggalKembali, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(listLaptop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateButton)
                    .addComponent(createButton)
                    .addComponent(deleteButton))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 527, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(41, Short.MAX_VALUE))
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed

        ManageLaptop selectedItem = (ManageLaptop) listLaptop.getSelectedItem();
        if (selectedItem != null && selectedItem != pilihLaptop) {
            try {
                com.toedter.calendar.JDateChooser tanggalSewa = inputTanggalSewa;
                com.toedter.calendar.JDateChooser tanggalKembali = inputTanggalKembali;

                transaksi = new Transaksi(selectedIdTransaksi, tanggalSewa, tanggalKembali, selectedItem.getId());
                try {
                    Connection conn = k.getConnection();
                    String queryLama = """
                                UPDATE laptop
                                SET status = ?
                                WHERE id = ?
                            """;

                    PreparedStatement pslama = conn.prepareStatement(queryLama);

                    pslama.setInt(1, 1);
                    pslama.setInt(2, selectedIdLaptop);

                    pslama.executeUpdate();
                    model.setRowCount(0);  // Menghapus semua baris dari model
                    ReadTransaksi();  // Memuat ulang data transaksi ke dalam tabel
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(this, "Gagal mengubah status laptop: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
                if (transaksi.updateTransaksi()) {
                    transaksi.updateTransaksi();
                    try {
                        Connection conn = k.getConnection();
                        String query = """
                                    UPDATE laptop
                                    SET status = ?
                                    WHERE id = ?
                                """;

                        PreparedStatement ps = conn.prepareStatement(query);

                        ps.setInt(1, 2);
                        ps.setInt(2, transaksi.getIdLaptop());

                        ps.executeUpdate();


                        model.setRowCount(0);  // Menghapus semua baris dari model
                        ReadTransaksi();  // Memuat ulang data transaksi ke dalam tabel
                        //listLaptop.removeAllItems();;
                        modelList.removeAllElements();
                        DaftarLaptop();

                        JOptionPane.showMessageDialog(this, "Transaksi berhasil disimpan dan status laptop diperbarui!", "Success", JOptionPane.INFORMATION_MESSAGE);
                    } catch (SQLException e) {
                        JOptionPane.showMessageDialog(this, "Gagal mengubah status laptop: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Transaksi gagal disimpan!", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Terjadi kesalahan: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);

            }
        } else {
            JOptionPane.showMessageDialog(this, "Tidak ada laptop yang dipilih!", "Peringatan", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void createButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createButtonActionPerformed
        //String selectedItem = (String) listLaptop.getSelectedItem();
        ManageLaptop selectedItem = (ManageLaptop) listLaptop.getSelectedItem();
        if (selectedItem != null && selectedItem != pilihLaptop) {
            try {
                com.toedter.calendar.JDateChooser tanggalSewa = inputTanggalSewa;
                com.toedter.calendar.JDateChooser tanggalKembali = inputTanggalKembali;
                //int laptop = (Integer) listLaptop.getClientProperty(selectNamaLaptop);

                transaksi = new Transaksi(0, tanggalSewa, tanggalKembali, selectedItem.getId());

                if (transaksi.insertTransaksi()) {
                    try {
                        Connection conn = k.getConnection();
                        String query = """
                                    UPDATE laptop
                                    SET status = ?
                                    WHERE id = ?
                                """;

                        PreparedStatement ps = conn.prepareStatement(query);

                        ps.setInt(1, 2);
                        ps.setInt(2, transaksi.getIdLaptop());

                        ps.executeUpdate();
                        model.setRowCount(0);  // Menghapus semua baris dari model
                        ReadTransaksi();  // Memuat ulang data transaksi ke dalam tabel
                        //modelList.removeAllElements();
                        //listLaptop.removeAllItems();
                        DaftarLaptop();
                        JOptionPane.showMessageDialog(this, "Transaksi berhasil disimpan!", "Success", JOptionPane.INFORMATION_MESSAGE);
                    } catch (SQLException e) {
                        JOptionPane.showMessageDialog(this, "Gagal mengubah status laptop: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Transaksi gagal disimpan!", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Terjadi kesalahan: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Tidak ada laptop yang dipilih!", "Peringatan", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_createButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        transaksi.setId(selectedIdTransaksi);

        if (transaksi.deleteTransaksi()) {
            try {
                Connection conn = k.getConnection();
                String query = """
                    UPDATE laptop
                    SET status = ?
                    WHERE id = ?
                """;

                PreparedStatement ps = conn.prepareStatement(query);

                ps.setInt(1, 3);
                ps.setInt(2, selectedIdLaptop);

                ps.executeUpdate();

                model.setRowCount(0);  // Menghapus semua baris dari model
                ReadTransaksi();  // Memuat ulang data transaksi ke dalam tabel
                DaftarLaptop();

                JOptionPane.showMessageDialog(this, "Transaksi berhasil dihapus!", "Success", JOptionPane.INFORMATION_MESSAGE);
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Gagal mengubah status laptop: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Transaksi gagal dihapus!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void listLaptopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listLaptopActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_listLaptopActionPerformed

    private void tableTransaksiMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableTransaksiMouseClicked
        // Untuk Get ID Transaksi
        int row = tableTransaksi.getSelectedRow();
        Object selectedIdTransaksiObject = tableTransaksi.getValueAt(row, 0);
        selectedIdTransaksi = (int) selectedIdTransaksiObject;
        System.out.println(selectedIdTransaksi);

        // Untuk Get ID Laptop
        Object selectedIdLaptopObject = tableTransaksi.getValueAt(row, 5);
        selectedIdLaptop = (int) selectedIdLaptopObject;
        System.out.println(selectedIdLaptop);

        String namaLaptop = (String) tableTransaksi.getValueAt(row, 1); // Nama Laptop
        Date tanggalSewa = (Date) tableTransaksi.getValueAt(row, 2); // Tanggal Sewa
        Date tanggalPengembalian = (Date) tableTransaksi.getValueAt(row, 3); // Tanggal Pengembalian

        System.out.println(namaLaptop);

        // Tampilkan data ke form
//        listLaptop.setSelectedItem(namaLaptop);

        // Tetapkan nilai ke JDateChooser untuk tanggal sewa
        inputTanggalSewa.setDate(tanggalSewa);
        inputTanggalKembali.setDate(tanggalPengembalian);
    }//GEN-LAST:event_tableTransaksiMouseClicked

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        this.dispose();
        FrameCRUD frameCrud = new FrameCRUD();
        frameCrud.setSize(820, 800); // Atur ukuran frameCrud (lebar: 800px, tinggi: 600px)
        frameCrud.setLocationRelativeTo(null); // Mengatur frameCrud muncul di tengah layar
        frameCrud.setVisible(true);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        this.dispose();
        FrameLogin frameLogin = new FrameLogin();
        frameLogin.setSize(800, 400); // Atur ukuran frameLogin (lebar: 800px, tinggi: 600px)
        frameLogin.setLocationRelativeTo(null); // Mengatur frameLogin muncul di tengah layar
        frameLogin.setVisible(true);
    }//GEN-LAST:event_btnLogoutActionPerformed

    private void ReadTransaksi() {
        try {
            Connection conn = new Koneksi().getConnection();
            String query = "SELECT t.id, l.nama, t.tanggal_sewa, t.tanggal_kembali, t.total_harga, l.id FROM transaksi t JOIN laptop l on t.id_laptop = l.id";
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(query);

            model.setRowCount(0); // Hapus semua data dari tabel

            while (rs.next()) {
                int idTransaksi = rs.getInt("t.id");
                String namaLaptop = rs.getString("l.nama");
                Date tanggalSewa = rs.getDate("t.tanggal_sewa");
                Date tanggalKembali = rs.getDate("t.tanggal_kembali");
                int hargaTotal = rs.getInt("t.total_harga");
                int idLaptop = rs.getInt("l.id");
                model.addRow(new Object[]{idTransaksi, namaLaptop, tanggalSewa, tanggalKembali, hargaTotal, idLaptop});
            }
            conn.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Gagal memuat data transaksi: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void DaftarLaptop() {
        //listLaptop.removeAllItems();
        //listLaptop.addItem("Pilih Laptop");
        modelList.removeAllElements();
        modelList.addElement(pilihLaptop);
        //modelList.addElement();
        //listLaptop.addItem("Pilih Laptop");

        try {
            Connection conn = new Koneksi().getConnection();
            String query = "SELECT id, nama FROM laptop WHERE status = 1";
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(query);

            while (rs.next()) {
                int id = rs.getInt("id");
                String nama = rs.getString("nama");
                modelList.addElement(new ManageLaptop(id, nama));
                //listLaptop.addItem(nama);
                //listLaptop.putClientProperty(nama, id);
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Gagal memuat data laptop: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

        listLaptop.addActionListener(evt -> {
            ManageLaptop selectedLaptop = (ManageLaptop) modelList.getSelectedItem();
            if (selectedLaptop != null) {
                String selectNamaLaptop = selectedLaptop.getNama();
                int laptopId = selectedLaptop.getId();
                System.out.println("Item selected in combobox: " + selectNamaLaptop);
                System.out.println(laptopId);
            }
            //selectNamaLaptop = (String) modelList.getSelectedItem();
            //laptopId = (Integer) listLaptop.getClientProperty(selectNamaLaptop);

            //String selectedItem = (String) listLaptop.getSelectedItem();

        });
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrameTransaksi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrameTransaksi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrameTransaksi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameTransaksi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FrameTransaksi frame = new FrameTransaksi();
                frame.setSize(600, 800); // Atur ukuran frame (lebar: 800px, tinggi: 600px)
                frame.setLocationRelativeTo(null); // Mengatur frame muncul di tengah layar
                frame.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton createButton;
    private javax.swing.JButton deleteButton;
    private com.toedter.calendar.JDateChooser inputTanggalKembali;
    private com.toedter.calendar.JDateChooser inputTanggalSewa;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private JComboBox<ManageLaptop> listLaptop;
    private javax.swing.JTable tableTransaksi;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
